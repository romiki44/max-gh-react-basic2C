name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        #ulozi dependencies do cache aby sa mohli znovu pouzit v ostatnych joboch
        #treba nastavit output folder a key k tomuto folderu
        #key musi byt dynamicky, lebo ulozena cache sa zmeni vzdy,ked sa projekt zmeni...preto package-lock.json
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    #treba zadefinovat output, ak chceme aby bol vysledok dalej k dispozicii
    outputs:
      script-file: ${{ steps.publish.outputs.jsfile }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
        #musime kvazi vsetko znova kopirovat aj do build-jpbu
        #lenze tentoraz to uz najde v chache...ak sa nezmenil package-lock.json!
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        #vrati nazov javascriptoveho suboru (do konzoly napr.)
        #run: find dist/assets/*.js -type f -execdir echo '{}' ';'
        #presmerovanim >> do $GITHUB_OUTPUT sa ulozi do vzstupu
        #id umozni pristup v dalsich joboch, inac by bolo pristupne len v tomto
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'jsfile={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # path: |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        #pouzijem nazov suboru z build-jobu a vytlacime ho do konzoly napr.
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
